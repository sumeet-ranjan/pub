{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "190040120_A-10_2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "D8LKMnWDBgis"
      },
      "source": [
        "import torch\n",
        "import torchvision\n",
        "import torchvision.datasets as datasets\n",
        "from torch.utils.data import DataLoader\n",
        "from torch.utils.data import Dataset, TensorDataset\n",
        "from torch.utils.data import random_split\n",
        "\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torch.nn.functional as F\n",
        "import torchvision.transforms as transforms\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lp-DShV7BjtK",
        "outputId": "21661be4-964f-4d04-b4a6-e8f859d45c69"
      },
      "source": [
        "trans = transforms.Compose([transforms.ToTensor()])\n",
        "\n",
        "# MNIST dataset\n",
        "trainset = datasets.MNIST(root='./data', train=True, download=True, transform=trans)\n",
        "trainset, valset= random_split(trainset, [50000,10000])\n",
        "testset = datasets.MNIST(root='./data', train=False, download=True, transform=trans)\n",
        "\n",
        "print(len(trainset), len(valset), len(testset))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "50000 10000 10000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FOimhBuqUDq5",
        "outputId": "c0356644-95ff-4ae2-8c75-e8f63ce9e67c"
      },
      "source": [
        "trainset[0][0].shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 28, 28])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "ZCaFupWCUKeU",
        "outputId": "6e83cdc7-57d1-4bd3-9aa9-9bbabb5ce7b1"
      },
      "source": [
        "plt.imshow(trainset[0][0][0], cmap = \"gray\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f564d97bb38>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BwocA7UZBmUP"
      },
      "source": [
        "batch_size=128\n",
        "\n",
        "train_loader = DataLoader(dataset=trainset, batch_size=batch_size, shuffle=True)\n",
        "val_loader = DataLoader(dataset=valset, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(dataset=testset, batch_size=batch_size, shuffle=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "57npbDmwY04N"
      },
      "source": [
        "class NN(nn.Module):\n",
        "    def __init__(self, hidden_size=128):\n",
        "        super(NN, self).__init__()\n",
        "        self.linear_1= nn.Linear(28*28,out_features=hidden_size)\n",
        "        self.linear_2= nn.Linear(in_features=hidden_size,out_features=10)\n",
        "\n",
        "    def forward(self, data):\n",
        "        x=torch.flatten(data, start_dim=1, end_dim=-1)\n",
        "        x= self.linear_1(x)\n",
        "        x= F.relu(x)\n",
        "        x= self.linear_2(x)\n",
        "        return x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wrJuRG89VaZA"
      },
      "source": [
        "class FIT():\n",
        "  def __init__(self, nnmodel, epochs=20, lr=0.001):\n",
        "        self.nnmodel= nnmodel\n",
        "        self.epochs= epochs\n",
        "        self.lr= lr\n",
        "        self.train_loss_arr=[]\n",
        "        self.val_loss_arr= []\n",
        "        #self.test_loss= 0\n",
        "        self.train_accuracy=[]\n",
        "        self.val_accuracy=[]\n",
        "        #self.test_accuracy=0 \n",
        "\n",
        "  def fit(self):\n",
        "      nnmodel= self.nnmodel\n",
        "      optimizer= optim.SGD(self.nnmodel.parameters(), lr= self.lr,momentum=0.9)\n",
        "      loss_1=nn.CrossEntropyLoss()\n",
        "\n",
        "      for epoch in range(self.epochs):\n",
        "          nnmodel.train()\n",
        "          tot_loss=0\n",
        "          correct=0\n",
        "          total_train=0\n",
        "          total_val=0\n",
        "\n",
        "          for batch in train_loader:\n",
        "              data=batch[0]   #index 0 has data\n",
        "              label=batch[1]  #index 1 has label\n",
        "              optimizer.zero_grad()\n",
        "              output=nnmodel(data)\n",
        "\n",
        "              #training accuracy\n",
        "              total_train+=label.size(0)\n",
        "              a,pred=torch.max(output.data,1)\n",
        "              correct+=(pred==label).sum().item()\n",
        "\n",
        "              #loss training\n",
        "              loss=loss_1(output,label)\n",
        "              tot_loss+=loss.item()\n",
        "              loss.backward()\n",
        "              optimizer.step()\n",
        "\n",
        "          acc= 100*correct/total_train\n",
        "          self.train_accuracy.append(acc)\n",
        "          #tot_loss/= len(x_train)\n",
        "          self.train_loss_arr.append(tot_loss)\n",
        "\n",
        "          #vaidation\n",
        "          val_loss=0\n",
        "          correct=0\n",
        "          nnmodel.eval()\n",
        "\n",
        "          for batch in val_loader:\n",
        "              data=batch[0]\n",
        "              label=batch[1]\n",
        "\n",
        "              #validation loss\n",
        "              output=nnmodel(data)\n",
        "              loss=loss_1(output,label)\n",
        "              val_loss+=loss.item()\n",
        "\n",
        "              #validation accuracy\n",
        "              total_val+=label.size(0)\n",
        "              a,pred=torch.max(output.data,1)\n",
        "              correct+=(pred==label).sum().item()\n",
        "\n",
        "          acc= 100*correct/total_val\n",
        "          self.val_accuracy.append(acc)\n",
        "          #val_loss/= len(x_train)\n",
        "          self.val_loss_arr.append(val_loss)\n",
        "          print(f\"epoch{1+epoch} the train loss is {tot_loss} and validation loss is {val_loss}\")\n",
        "  def test(self):\n",
        "      correct=0\n",
        "      test_loss=0\n",
        "      total=0\n",
        "      with torch.no_grad():\n",
        "        for batch in test_loader:\n",
        "          data=batch[0]\n",
        "          label=batch[1]\n",
        "          output=nnmodel(data)\n",
        "          total+=label.size(0)\n",
        "          a,pred=torch.max(output.data,1)\n",
        "          correct+=(pred==label).sum().item()\n",
        "      print(f\"accuracy is {100*correct/total}\")\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kzjWO6pAWNJ-",
        "outputId": "59442356-c968-4f86-e4d2-c5f8c55477f6"
      },
      "source": [
        "nnet1=NN()\n",
        "model1=FIT(nnet1)\n",
        "model1.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 721.8121131658554 and validation loss is 99.27450132369995\n",
            "epoch2 the train loss is 358.934534907341 and validation loss is 54.065974056720734\n",
            "epoch3 the train loss is 237.1797128021717 and validation loss is 40.75929805636406\n",
            "epoch4 the train loss is 194.11142671108246 and validation loss is 35.02881279587746\n",
            "epoch5 the train loss is 172.4674074202776 and validation loss is 31.809954971075058\n",
            "epoch6 the train loss is 159.32440343499184 and validation loss is 29.974830523133278\n",
            "epoch7 the train loss is 150.4273101836443 and validation loss is 28.23338744044304\n",
            "epoch8 the train loss is 143.6512279957533 and validation loss is 27.188095048069954\n",
            "epoch9 the train loss is 138.58162873983383 and validation loss is 26.57320909202099\n",
            "epoch10 the train loss is 134.2334654033184 and validation loss is 25.8776728361845\n",
            "epoch11 the train loss is 130.6021419018507 and validation loss is 25.123498305678368\n",
            "epoch12 the train loss is 127.41280326247215 and validation loss is 24.283228881657124\n",
            "epoch13 the train loss is 124.51121564209461 and validation loss is 23.90727937221527\n",
            "epoch14 the train loss is 121.77670009434223 and validation loss is 23.5491860806942\n",
            "epoch15 the train loss is 119.4362253844738 and validation loss is 23.023339793086052\n",
            "epoch16 the train loss is 117.26657025516033 and validation loss is 22.93180212378502\n",
            "epoch17 the train loss is 115.12520530074835 and validation loss is 22.2734993994236\n",
            "epoch18 the train loss is 113.14156711101532 and validation loss is 21.8874481767416\n",
            "epoch19 the train loss is 111.2141137868166 and validation loss is 21.616177275776863\n",
            "epoch20 the train loss is 109.43270091712475 and validation loss is 21.236512452363968\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "8_WSzAsubQbr",
        "outputId": "f329e8b2-e6a8-4ee9-dfe6-0992f089570c"
      },
      "source": [
        "import seaborn as sb\n",
        "plt.figure(figsize=(12, 7))\n",
        "plt.plot(model1.train_loss_arr)\n",
        "plt.plot(model1.val_loss_arr)\n",
        "plt.legend(['train loss',\"validation loss\"])\n",
        "plt.xlabel('epochs')\n",
        "plt.ylabel('loss')\n",
        "sb.despine(offset=10, trim=True);\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "jRdUy9BybqlB",
        "outputId": "d91d8eb1-d821-4451-816d-b0e369bc0614"
      },
      "source": [
        "plt.figure(figsize=(12, 7))\n",
        "plt.plot(model1.train_accuracy,label='Train Accuracy')\n",
        "plt.plot(model1.val_accuracy,label='Validation Accuracy')\n",
        "plt.legend()\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DRtOsvnncFzK",
        "outputId": "455c1bc4-e4c8-4ce1-8785-f79ec92706ea"
      },
      "source": [
        "nn_32= NN(hidden_size=32)\n",
        "model_1= FIT(nn_32, epochs=10, lr=1e-3)\n",
        "model_1.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 756.250451207161 and validation loss is 112.8422155380249\n",
            "epoch2 the train loss is 404.5362271666527 and validation loss is 59.69215077161789\n",
            "epoch3 the train loss is 258.01277098059654 and validation loss is 44.03685975074768\n",
            "epoch4 the train loss is 207.56931427121162 and validation loss is 37.45786979794502\n",
            "epoch5 the train loss is 182.00765797495842 and validation loss is 33.33148270845413\n",
            "epoch6 the train loss is 166.43203431367874 and validation loss is 31.02493765950203\n",
            "epoch7 the train loss is 155.85015235841274 and validation loss is 29.08598193526268\n",
            "epoch8 the train loss is 148.0758694857359 and validation loss is 28.178684517741203\n",
            "epoch9 the train loss is 142.12186397612095 and validation loss is 26.954798474907875\n",
            "epoch10 the train loss is 137.27246852219105 and validation loss is 26.31531000137329\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Um38zBXcS77",
        "outputId": "5e1aa026-b412-4148-d708-163e42a2491b"
      },
      "source": [
        "nn_64= NN(hidden_size=64)\n",
        "model_2= FIT(nn_64, epochs=10, lr=1e-3)\n",
        "model_2.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 725.0199078321457 and validation loss is 101.79475319385529\n",
            "epoch2 the train loss is 367.9652806520462 and validation loss is 55.00145763158798\n",
            "epoch3 the train loss is 241.49744933843613 and validation loss is 41.275308698415756\n",
            "epoch4 the train loss is 196.84267550706863 and validation loss is 35.48902475833893\n",
            "epoch5 the train loss is 174.43733170628548 and validation loss is 32.044627502560616\n",
            "epoch6 the train loss is 160.90904700756073 and validation loss is 29.8130314797163\n",
            "epoch7 the train loss is 151.71102941036224 and validation loss is 28.328873202204704\n",
            "epoch8 the train loss is 144.9307041466236 and validation loss is 27.56043331325054\n",
            "epoch9 the train loss is 139.62977163493633 and validation loss is 26.253622822463512\n",
            "epoch10 the train loss is 135.39651063084602 and validation loss is 25.7345372736454\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "do7o4SvecWxz",
        "outputId": "6938a0d1-a346-45ae-cc04-99f59c57b644"
      },
      "source": [
        "nn_128= NN(hidden_size=128)\n",
        "model_3= FIT(nn_128, epochs=10, lr=1e-3)\n",
        "model_3.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 709.614470243454 and validation loss is 97.34970355033875\n",
            "epoch2 the train loss is 352.52341789007187 and validation loss is 52.9907928109169\n",
            "epoch3 the train loss is 232.9564397931099 and validation loss is 40.0020435154438\n",
            "epoch4 the train loss is 190.8444061279297 and validation loss is 34.58318403363228\n",
            "epoch5 the train loss is 169.7972060739994 and validation loss is 31.438710153102875\n",
            "epoch6 the train loss is 156.9422352015972 and validation loss is 29.133671015501022\n",
            "epoch7 the train loss is 148.27133582532406 and validation loss is 27.669746801257133\n",
            "epoch8 the train loss is 141.67326846718788 and validation loss is 26.775251746177673\n",
            "epoch9 the train loss is 136.5555485188961 and validation loss is 25.928489044308662\n",
            "epoch10 the train loss is 132.3901713937521 and validation loss is 24.910923928022385\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VPLIx8aQcY3N",
        "outputId": "b904210b-92f3-4b8e-933a-b5b8703c87bd"
      },
      "source": [
        "nn_256= NN(hidden_size=256)\n",
        "model_4= FIT(nn_256, epochs=10, lr=1e-3)\n",
        "model_4.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 721.3286240100861 and validation loss is 98.74303185939789\n",
            "epoch2 the train loss is 352.670084297657 and validation loss is 52.763886749744415\n",
            "epoch3 the train loss is 232.22865602374077 and validation loss is 40.14330017566681\n",
            "epoch4 the train loss is 190.45666325092316 and validation loss is 34.340473622083664\n",
            "epoch5 the train loss is 169.5439517199993 and validation loss is 31.25425824522972\n",
            "epoch6 the train loss is 156.848310649395 and validation loss is 29.17003771662712\n",
            "epoch7 the train loss is 148.0465371310711 and validation loss is 28.385731875896454\n",
            "epoch8 the train loss is 141.5256740450859 and validation loss is 26.753252431750298\n",
            "epoch9 the train loss is 136.21262358129025 and validation loss is 25.74119731783867\n",
            "epoch10 the train loss is 131.86839227378368 and validation loss is 25.11665879189968\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d_MixDP3cagB",
        "outputId": "26ddfff9-2fa0-4568-b00b-0587394ff761"
      },
      "source": [
        "nn_512= NN(hidden_size=512)\n",
        "model_5= FIT(nn_512, epochs=10, lr=1e-3)\n",
        "model_5.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 699.0239855051041 and validation loss is 92.04464411735535\n",
            "epoch2 the train loss is 335.2091035246849 and validation loss is 50.828242123126984\n",
            "epoch3 the train loss is 226.56891590356827 and validation loss is 39.148188173770905\n",
            "epoch4 the train loss is 187.73843124508858 and validation loss is 33.712143689394\n",
            "epoch5 the train loss is 167.72558599710464 and validation loss is 30.78237085044384\n",
            "epoch6 the train loss is 155.38312901556492 and validation loss is 29.378555670380592\n",
            "epoch7 the train loss is 146.77323991060257 and validation loss is 27.72594529390335\n",
            "epoch8 the train loss is 140.34387755393982 and validation loss is 26.495589941740036\n",
            "epoch9 the train loss is 135.09696574509144 and validation loss is 25.510951459407806\n",
            "epoch10 the train loss is 130.82920728623867 and validation loss is 24.695122316479683\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "RsSE0rLPdwYc",
        "outputId": "7b2265c8-5d9a-436b-b4a3-6bd877df2735"
      },
      "source": [
        "models=[model_1,model_2,model_3,model_4,model_5]\n",
        "val_loss=[]\n",
        "for i in models:\n",
        "    val_loss.append(np.min(i.val_loss_arr[-1]))\n",
        "\n",
        "value=[32,64,128,256,512]\n",
        "print(val_loss)\n",
        "plt.figure(figsize=(12, 7))\n",
        "sb.lineplot(x=value,y=val_loss)\n",
        "#plt.plot(x={2,4,6,8,10},y=val_loss_max)\n",
        "plt.xlabel('hidden layer size')\n",
        "plt.ylabel('minimum validation loss')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[26.31531000137329, 25.7345372736454, 24.910923928022385, 25.11665879189968, 24.695122316479683]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-7YdJOgwd0rI",
        "outputId": "3e1a47f5-a122-4046-d453-f87c4f903ad4"
      },
      "source": [
        "nn_1= NN()\n",
        "model_a=FIT(nn_1, epochs=10, lr=1e-1)\n",
        "model_a.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 129.61724942922592 and validation loss is 11.974128913134336\n",
            "epoch2 the train loss is 48.124417124316096 and validation loss is 9.169152403250337\n",
            "epoch3 the train loss is 34.48918094858527 and validation loss is 7.622411226853728\n",
            "epoch4 the train loss is 26.196750815026462 and validation loss is 7.828643217682838\n",
            "epoch5 the train loss is 21.080215393099934 and validation loss is 7.744236839003861\n",
            "epoch6 the train loss is 17.03644869592972 and validation loss is 6.695877471240237\n",
            "epoch7 the train loss is 12.81901425216347 and validation loss is 6.10788765642792\n",
            "epoch8 the train loss is 10.243048480013385 and validation loss is 7.313907495699823\n",
            "epoch9 the train loss is 8.53097785927821 and validation loss is 6.408061085734516\n",
            "epoch10 the train loss is 6.4409296561498195 and validation loss is 6.759626329410821\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_v2OoBuMd-RX",
        "outputId": "be103d05-ec3a-4ec5-c67d-61034733667e"
      },
      "source": [
        "nn_2 = NN()\n",
        "model_b= FIT(nn_2, epochs=10, lr=1e-2)\n",
        "model_b.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 266.40001460909843 and validation loss is 26.609655484557152\n",
            "epoch2 the train loss is 122.32488529384136 and validation loss is 21.31869786977768\n",
            "epoch3 the train loss is 102.80034118145704 and validation loss is 18.718156807124615\n",
            "epoch4 the train loss is 88.78154898434877 and validation loss is 16.131257005035877\n",
            "epoch5 the train loss is 77.91919329762459 and validation loss is 14.691438425332308\n",
            "epoch6 the train loss is 69.16471466422081 and validation loss is 13.449780352413654\n",
            "epoch7 the train loss is 62.147464729845524 and validation loss is 12.1864941008389\n",
            "epoch8 the train loss is 56.191822960972786 and validation loss is 11.38217418640852\n",
            "epoch9 the train loss is 51.189187839627266 and validation loss is 10.583047632128\n",
            "epoch10 the train loss is 47.024155616760254 and validation loss is 10.098155368119478\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gCGAIN9Dd-x3",
        "outputId": "b77cf3eb-625d-4239-9827-f337cf209135"
      },
      "source": [
        "nn_3= NN()\n",
        "model_c= FIT(nn_3, epochs=10, lr=1e-3)\n",
        "model_c.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 739.5694125890732 and validation loss is 103.34128928184509\n",
            "epoch2 the train loss is 369.35337460041046 and validation loss is 55.10108029842377\n",
            "epoch3 the train loss is 240.64078092575073 and validation loss is 41.2229078412056\n",
            "epoch4 the train loss is 195.68106016516685 and validation loss is 35.058175787329674\n",
            "epoch5 the train loss is 172.99289447069168 and validation loss is 32.211055129766464\n",
            "epoch6 the train loss is 159.38841135799885 and validation loss is 29.71941602230072\n",
            "epoch7 the train loss is 150.02295500040054 and validation loss is 28.28355446457863\n",
            "epoch8 the train loss is 143.11285988986492 and validation loss is 27.286919310688972\n",
            "epoch9 the train loss is 137.7288534641266 and validation loss is 26.032380983233452\n",
            "epoch10 the train loss is 133.20869667828083 and validation loss is 25.202930063009262\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i8WhhUznd_M9",
        "outputId": "503911bf-c999-4f88-81b3-4d26f69935c2"
      },
      "source": [
        "nn_4= NN()\n",
        "model_d= FIT(nn_4, epochs=10, lr=1e-4)\n",
        "model_d.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 886.7748324871063 and validation loss is 176.60802221298218\n",
            "epoch2 the train loss is 859.6894326210022 and validation loss is 170.63791632652283\n",
            "epoch3 the train loss is 827.7886433601379 and validation loss is 163.54993057250977\n",
            "epoch4 the train loss is 789.9520492553711 and validation loss is 155.32473707199097\n",
            "epoch5 the train loss is 746.5283393859863 and validation loss is 146.0297496318817\n",
            "epoch6 the train loss is 698.874804854393 and validation loss is 136.09871065616608\n",
            "epoch7 the train loss is 648.8334786891937 and validation loss is 125.75546705722809\n",
            "epoch8 the train loss is 598.3981821537018 and validation loss is 115.75781106948853\n",
            "epoch9 the train loss is 549.834671497345 and validation loss is 105.98860287666321\n",
            "epoch10 the train loss is 504.9227683544159 and validation loss is 97.18194210529327\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7XzvMKpod_ox",
        "outputId": "86e5bd82-aa59-4ee9-ba8f-6569d9414e0f"
      },
      "source": [
        "nn_5= NN()\n",
        "model_e= FIT(nn_5, epochs=10, lr=1e-5)\n",
        "model_e.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch1 the train loss is 896.088211774826 and validation loss is 180.83542895317078\n",
            "epoch2 the train loss is 893.6039490699768 and validation loss is 180.3046476840973\n",
            "epoch3 the train loss is 891.1288979053497 and validation loss is 179.81515836715698\n",
            "epoch4 the train loss is 888.64302277565 and validation loss is 179.31126761436462\n",
            "epoch5 the train loss is 886.150155544281 and validation loss is 178.80641102790833\n",
            "epoch6 the train loss is 883.6355211734772 and validation loss is 178.27636671066284\n",
            "epoch7 the train loss is 881.092827796936 and validation loss is 177.79439544677734\n",
            "epoch8 the train loss is 878.5188941955566 and validation loss is 177.2464096546173\n",
            "epoch9 the train loss is 875.8993473052979 and validation loss is 176.70769786834717\n",
            "epoch10 the train loss is 873.2456426620483 and validation loss is 176.18785619735718\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "HJBZzZowiV_L",
        "outputId": "90ed6da4-e3e3-47ab-8fcf-c082d58c4271"
      },
      "source": [
        "models=[model_e,model_d,model_c,model_b,model_a]\n",
        "val_loss=[]\n",
        "for i in models:\n",
        "    val_loss.append(np.min(i.val_loss_arr[-1]))\n",
        "\n",
        "value=[-5,-4,-3,-2,-1]\n",
        "print(val_loss)\n",
        "plt.figure(figsize=(12, 7))\n",
        "sb.lineplot(x=value,y=val_loss)\n",
        "plt.xlabel('learning rate in 1e')\n",
        "plt.ylabel('minimum validation loss')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[176.18785619735718, 97.18194210529327, 25.202930063009262, 10.098155368119478, 6.759626329410821]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Wtz5GThj0RD"
      },
      "source": [
        "### ConvNets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DUidzAKqQ1eR"
      },
      "source": [
        "class CNN(nn.Module):\n",
        "    def __init__(self,hidden_layer=128):\n",
        "        super(CNN, self).__init__()\n",
        "        self.conv_1 = torch.nn.Conv2d(in_channels=28*28, out_channels=hidden_layer, kernel_size=5, stride=1, padding=1)\n",
        "        self.conv_2 = torch.nn.Conv2d(in_channels=hidden_layer, out_channels=hidden_layer, kernel_size=5, stride=1, padding=1)\n",
        "        self.max_pool2d = torch.nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.linear_1 = torch.nn.Linear(7 * 7 * 128, 128)\n",
        "        self.linear_2 = torch.nn.Linear(128, 10)\n",
        "        self.relu = torch.nn.ReLU()\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = F.relu(self.conv_1(x))\n",
        "        x = self.max_pool2d(x)\n",
        "        x = F.dropout(x, p=0.5)\n",
        "        x = F.relu(self.conv_2(x))\n",
        "        x = self.max_pool2d(x)\n",
        "        x = torch.flatten(x)\n",
        "        x = F.relu(self.linear_1(x))\n",
        "        return self.linear_2(x)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}